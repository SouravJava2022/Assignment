import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Queue;

/*
 *  9. Write a Java program that implements a producer-consumer model using
       multithreading. The program should have a producer thread that generates random
       numbers and adds them to a queue, and a consumer thread that reads numbers
       from the queue and calculates their sum. The program should use synchronization to
       ensure that the queue is accessed by only one thread at a time.
 */

class Producer extends Thread{
  
     private Queue list;

	public Producer(Queue list) {
    	 this.list=list;
		synchronized (list) {
			for(int j=0;j<10;j++) {
				list.add(j);
				list.notify();
			}
			System.out.println("***********"+list);
		}
	}

	@Override
	public void run() { 
    	 System.out.println("List Items::"+list);
}
}
class Consumer extends Thread{


	private Queue list;

	public Consumer(Queue list) {
		this.list=list;
		
	}

	@Override
	public void run() {
		synchronized(list) {
			if(list.isEmpty()) {
				try {
					list.wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			else {
				Iterator it = list.iterator();
				while(it.hasNext()) {
					Object next = it.next();
					System.out.println("Objects Are::"+next);
				}
			}
		}
	}	
}
	 
public class TestApp {

	public static void main(String[] args) {
	Queue list = new LinkedList();
	
	Producer P = new Producer(list);
	Consumer C = new Consumer(list);
	P.start();
	C.start();
	System.out.println("Main Thread");
	}
}

